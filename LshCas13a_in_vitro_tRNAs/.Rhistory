if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Gviz")
install.packages("RCurl")
BiocManager::install("GenomicRanges")
install.packages("RCurl")
install.packages("RCurl")
BiocManager::install("GenomicRanges")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Gviz")
BiocManager::install("rtracklayer")
BiocManager::install("rtracklayer")
BiocManager::install("Rsubread")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Gviz")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Gviz")
install.packages("svglite")
install.packages("svglite")
install.packages("svglite")
install.packages("tydiverse")
install. packages("tidyverse")
install.packages("tidyverse")
library(data.table)
library(dplyr)
setwd("~/data/DroAr_data/")
#file with RPKM normalized read counts table
read_counts_normalized <- "Results/read_counts_RPKM_normalized.tsv"
#load read counts table
read_counts_normalized.dt <- fread(read_counts_normalized)
library(data.table)
library(dplyr)
setwd("~/data/Drobysheva_et_al_2020/")
#file with RPKM normalized read counts table
read_counts_normalized <- "Results/read_counts_RPKM_normalized.tsv"
#load read counts table
read_counts_normalized.dt <- fread(read_counts_normalized)
#classification of genes by time classes
#select ORFs
read_counts_normalized.dt_orfs <- read_counts_normalized.dt %>%
filter(!grepl("igr", feature))
#calculate logFC values between neighbor time points
logfc_df <- data.table(feature = counts.rpkms$feature,
logfc_40vs90 = log10(counts.rpkms$`90`)-log10(counts.rpkms$`40`),
logfc_90vs140 = log10(counts.rpkms$`140`)-log10(counts.rpkms$`90`),
logfc_140vs190 = log10(counts.rpkms$`190`)-log10(counts.rpkms$`140`))
library(dplyr)
setwd("~/data/Drobysheva_et_al_2020/")
#file with RPKM normalized read counts table
read_counts_normalized <- "Results/read_counts_RPKM_normalized.tsv"
#load read counts table
read_counts_normalized.dt <- fread(read_counts_normalized)
#classification of genes by time classes
#select ORFs
read_counts_normalized.dt_orfs <- read_counts_normalized.dt %>%
filter(!grepl("igr", feature))
#calculate logFC values between neighbor time points
logfc_df <- data.table(feature = counts.rpkms$feature,
logfc_40vs90 = log10(counts.rpkms$`90`)-log10(counts.rpkms$`40`),
logfc_90vs140 = log10(counts.rpkms$`140`)-log10(counts.rpkms$`90`),
logfc_140vs190 = log10(counts.rpkms$`190`)-log10(counts.rpkms$`140`))
logFC.dt <- data.table(feature = read_counts_normalized.dt_orfs$feature,
logfc_40vs90 = with(read_counts_normalized.dt_orfs, log10(t90)-log10(t40)),
logfc_90vs140 = with(read_counts_normalized.dt_orfs, log10(t140)-log10(t90)),
logfc_90vs190 = with(read_counts_normalized.dt_orfs, log10(t190)-log10(t90)),
logfc_140vs190 = with(read_counts_normalized.dt_orfs, log10(t190)-log10(t140)))
library(data.table)
library(dplyr)
setwd("~/data/Drobysheva_et_al_2020/")
#file with RPKM normalized read counts table
read_counts_normalized <- "Results/read_counts_RPKM_normalized.tsv"
#load read counts table
read_counts_normalized.dt <- fread(read_counts_normalized)
#classification of genes by time classes
#select ORFs
read_counts_normalized.dt_orfs <- read_counts_normalized.dt %>%
filter(!grepl("igr", feature))
#calculate logFC values between neighbor time points
logfc_df <- data.table(feature = counts.rpkms$feature,
logfc_40vs90 = log10(counts.rpkms$`90`)-log10(counts.rpkms$`40`),
logfc_90vs140 = log10(counts.rpkms$`140`)-log10(counts.rpkms$`90`),
logfc_140vs190 = log10(counts.rpkms$`190`)-log10(counts.rpkms$`140`))
#calculate logFC values between neighbor time points
logFC.dt <- data.table(feature = read_counts_normalized.dt_orfs$feature,
logfc_40vs90 = with(read_counts_normalized.dt_orfs, log10(t90)-log10(t40)),
logfc_90vs140 = with(read_counts_normalized.dt_orfs, log10(t140)-log10(t90)),
logfc_90vs190 = with(read_counts_normalized.dt_orfs, log10(t190)-log10(t90)),
logfc_140vs190 = with(read_counts_normalized.dt_orfs, log10(t190)-log10(t140)))
logFC.dt <- data.table(feature = read_counts_normalized.dt_orfs$feature,
logfc_40vs90 = with(read_counts_normalized.dt_orfs, log10(t90)-log10(t40)),
logfc_90vs140 = with(read_counts_normalized.dt_orfs, log10(t140)-log10(t90)),
logfc_90vs190 = with(read_counts_normalized.dt_orfs, log10(t190)-log10(t90)),
logfc_140vs190 = with(read_counts_normalized.dt_orfs, log10(t190)-log10(t140)))
#classify ORFs according to the differences between different times of infection
putative_early_genes <- logFC.dt[logfc_90vs140 < 0 & logfc_140vs190 < 0]$feature
putative_middle_genes <- logFC.dt[logfc_90vs190 > 0 & logfc_90vs190 <= 1]$feature
putative_late_genes <- logFC.dt[logfc_90vs190 > 1]$feature
read_counts_normalized.dt_orfs.time_classes <- read_counts_normalized.dt_orfs %>%
mutate(time_class = ifelse(feature %in% putative_early_genes, "early",
ifelse(feature %in% putative_middle_genes, "middle",
ifelse(feature %in% putative_late_genes, "late", "ND"))))
View(read_counts_normalized.dt_orfs.time_classes)
fwrite(read_counts_normalized.dt_orfs.time_classes, "Results/gene_classes_and_RPKMs.tsv", sep = "\t", quote = F, row.names = F)
View(read_counts_normalized.dt_orfs)
View(logFC.dt)
library(data.table)
library(dplyr)
library(reshape2)
library(ggplot2)
setwd("~/data/Drobysheva_et_al_2020/")
#File with normalized transcript abundances and time classes
classified_ORFs <- "Results/gene_classes_and_RPKMs.tsv"
#Annotation file
phi14_2_annotation <- "annotation/NC_021806_annotation_by_EVK.gff3"
#transcript abundances table
tr_ab_table <- "Results/read_counts_RPKM_normalized.tsv"
#load data
classified_ORFs_Rif_minus.dt <- fread(classified_ORFs) %>%
select(-c("without_phage", "t40_Rif", "t90_Rif", "t140_Rif", "t190_Rif")) #remove uninfected sample and Rif+ samples
#g107 ORF is located within middle genes segment and we suspect that this gene is also should belong to middle gene class
classified_ORFs_Rif_minus.dt[feature == "g107"]$time_class <- "middle"
#normalize transcript abundances for each ORF to max. transcript abundance across all time points
classified_ORFs_Rif_minus.dt_maxnorm <- classified_ORFs_Rif_minus.dt
classified_ORFs_Rif_minus.dt_maxnorm[,c("t40", "t90", "t140", "t190")] <- classified_ORFs_Rif_minus.dt_maxnorm[,c("t40", "t90", "t140", "t190")]/apply(classified_ORFs_Rif_minus.dt_maxnorm[,c("t40", "t90", "t140", "t190")], 1, max)
classified_ORFs_Rif_minus.dt_maxnorm.melted <- melt(classified_ORFs_Rif_minus.dt_maxnorm, id.vars = c("feature", "time_class"), variable.name = "time_point", value.name = "abundance") %>%
mutate(time_class = factor(time_class, levels = c("early", "middle", "late")))
#Draw plot
tr_abundances <- ggplot(classified_ORFs_Rif_minus.dt_maxnorm.melted, aes(x = time_point, y = abundance, group = feature, colour = feature)) +
geom_line() +
facet_grid(cols = vars(time_class)) +
theme(legend.position = "none") +
xlab(label = "Time post-infection, min") +
ylab(label = "Transcript abundances, % of max. expression") +
scale_x_discrete(labels=c("40", "90", "140", "190")) +
theme_bw() +
theme(legend.position="none")
ggplot(classified_ORFs_Rif_minus.dt_maxnorm.melted, aes(x = time_point, y = abundance, group = feature, colour = feature)) +
geom_line() +
facet_grid(cols = vars(time_class)) +
theme(legend.position = "none") +
xlab(label = "Time post-infection, min") +
ylab(label = "Transcript abundances, % of max. expression") +
scale_x_discrete(labels=c("40", "90", "140", "190")) +
theme_bw() +
theme(legend.position="none")
ggsave("Results/Pictures/Transcript_abundances_Rif_minus.svg", tr_abundances)
#Draw plot of transcript abundances in Rif+ samples normalized to local max. values in Rif- samples
classified_ORFs.dt <- fread(classified_ORFs) %>%
select(-without_phage)
classified_ORFs.dt[feature == "g107"]$time_class <- "middle"
classified_ORFs.dt_Rif_plus_norm_to_Rif_minus <- classified_ORFs.dt
classified_ORFs.dt_Rif_plus_norm_to_Rif_minus[,c("t40_Rif", "t90_Rif", "t140_Rif", "t190_Rif")] <-
classified_ORFs.dt_Rif_plus_norm_to_Rif_minus[,c("t40_Rif", "t90_Rif", "t140_Rif", "t190_Rif")]/apply(classified_ORFs.dt_Rif_plus_norm_to_Rif_minus[,c("t40", "t90", "t140", "t190")], 1, max)
classified_ORFs.dt_Rif_plus_norm_to_Rif_minus <- classified_ORFs.dt_Rif_plus_norm_to_Rif_minus %>%
select(-c("t40", "t90", "t140", "t190"))
classified_ORFs.dt_Rif_plus_norm_to_Rif_minus.melted <- melt(classified_ORFs.dt_Rif_plus_norm_to_Rif_minus, id.vars = c("feature", "time_class"), variable.name = "time_point", value.name = "abundance")%>%
mutate(time_class = factor(time_class, levels = c("early", "middle", "late")))
tr_abundances_rifplus <- ggplot(classified_ORFs.dt_Rif_plus_norm_to_Rif_minus.melted, aes(x = time_point, y = abundance, group = feature)) +
geom_line(aes(colour=time_class, alpha=feature), show.legend = FALSE) +
scale_colour_manual(values = c(early="darkgreen", middle="purple", late="blue", guide="none")) +
facet_wrap(~time_class, ncol=3) +
scale_x_discrete(labels=c("40", "90", "140", "190")) +
xlab(label = "Time after infection, min") +
ylab(label = "Transcript abundance, %")
ggsave("Results/Pictures/Transcript_abundances_Rif_plus_norm_to_Rif_minus.svg", tr_abundances_rifplus)
ggplot(classified_ORFs.dt_Rif_plus_norm_to_Rif_minus.melted, aes(x = time_point, y = abundance, group = feature)) +
geom_line(aes(colour=time_class, alpha=feature), show.legend = FALSE) +
scale_colour_manual(values = c(early="darkgreen", middle="purple", late="blue", guide="none")) +
facet_wrap(~time_class, ncol=3) +
scale_x_discrete(labels=c("40", "90", "140", "190")) +
xlab(label = "Time after infection, min") +
ylab(label = "Transcript abundance, %")
ggsave("Results/Pictures/Transcript_abundances_Rif_plus_norm_to_Rif_minus.svg", tr_abundances_rifplus)
library(Gviz)
library(rtracklayer)
options(ucscChromosomeNames = F)
tr_ab_table.dt <- fread(tr_ab_table) %>%
select(-c("without_phage", "t40_Rif", "t90_Rif", "t140_Rif", "t190_Rif")) #remove uninfected sample and Rif+ samples
tr_ab_table.dt_localmaxnorm <- tr_ab_table.dt
tr_ab_table.dt_localmaxnorm[,c("t40", "t90", "t140", "t190")] <- tr_ab_table.dt_localmaxnorm[,c("t40", "t90", "t140", "t190")]/apply(tr_ab_table.dt_localmaxnorm[,c("t40", "t90", "t140", "t190")], 1, max)
phi14_2_annotation.GR <- readGFFAsGRanges(phi14_2_annotation)
phi14_2_annotation.track <- AnnotationTrack(start = phi14_2_annotation.GR@ranges@start,
width = phi14_2_annotation.GR@ranges@width,
chromosome = "NC_021806.1",
strand = as.character(phi14_2_annotation.GR@strand),
id = phi14_2_annotation.GR$ID,
stacking="dense",
fill = "grey",
col = "black",
lex = 10,
lty = 1,
shape = "fixedArrow",
arrowHeadWidth = 100,
lwd = 1,
fontcolor.feature="black",
rotation.item = 90,
cex = 2,
labelPos = "below")
axisTrack <- GenomeAxisTrack(cex = 2, labelPos="below", size = 1)
hm_data <- GRanges(seqnames = phi14_2_annotation.GR@seqnames, ranges = phi14_2_annotation.GR@ranges, strand = rep("*", length(phi14_2_annotation.GR@ranges)))
hm_data$feature <- phi14_2_annotation.GR$ID
#Draw heatmap normalized to local max.
values(hm_data) <- merge(hm_data, tr_ab_table.dt_localmaxnorm, by.x = "feature", sort = F)[c("t40", "t90", "t140", "t190")]
dTrack <- DataTrack(hm_data,
name = "rpkm/local_max(rpkms)",
type = "heatmap",
showSampleNames = T)
plotTracks(c(phi14_2_annotation.track, axisTrack, dTrack), featureAnnotation = "id")
svg("Results/Pictures/transcript_abundances_heatmap_norm_on_norm_on_local_max.svg", width = 150, height = 40)
plotTracks(c(phi14_2_annotation.track, axisTrack, dTrack), featureAnnotation = "id")
dev.off()
#maximum value across transcript abundances of all ORFs across all time points
global_max_value <- max(apply(tr_ab_table.dt[,c("t40", "t90", "t140", "t190")], 1, max))
tr_ab_table.dt_globalmaxnorm <- tr_ab_table.dt
tr_ab_table.dt_globalmaxnorm[,c("t40", "t90", "t140", "t190")] <- tr_ab_table.dt_globalmaxnorm[,c("t40", "t90", "t140", "t190")]/global_max_value
hm_data <- GRanges(seqnames = phi14_2_annotation.GR@seqnames, ranges = phi14_2_annotation.GR@ranges, strand = rep("*", length(phi14_2_annotation.GR@ranges)))
hm_data$feature <- phi14_2_annotation.GR$ID
#Draw heatmap normalized to global max.
values(hm_data) <- merge(hm_data, tr_ab_table.dt_globalmaxnorm, by.x = "feature", sort = F)[c("t40", "t90", "t140", "t190")]
dTrack <- DataTrack(hm_data,
name = "rpkm/local_max(rpkms)",
type = "heatmap",
showSampleNames = T)
svg("Results/Pictures/transcript_abundances_heatmap_norm_on_norm_on_global_max.svg", width = 150, height = 40)
plotTracks(c(phi14_2_annotation.track, axisTrack, dTrack), featureAnnotation = "id")
dev.off()
plotTracks(c(phi14_2_annotation.track, axisTrack, dTrack), featureAnnotation = "id")
setwd("/home/matvey/data/LshCas13a_RNA_cleavage/LshCas13a_in_vitro_tRNAs/")
annotation_file <- "Annotations/NC_000913.3.gff3"
#loading annotation
#annotation_GR <- readGFFAsGRanges(filepath = annotation_file, filter = list("type"=c("CDS", "rRNA", "tRNA")))
annotation_GR <- readGFFAsGRanges(filepath = annotation_file)
#loading TCS table
TCS_df <- read.delim(file = "Results/Tables/TCS_detection_tables/LRTest_table.tsv", sep = "\t", stringsAsFactors = F)
library(dplyr)
library(data.table)
library(rtracklayer)
setwd("/home/matvey/data/LshCas13a_RNA_cleavage/LshCas13a_in_vitro_tRNAs/")
annotation_file <- "Annotations/NC_000913.3.gff3"
#loading annotation
#annotation_GR <- readGFFAsGRanges(filepath = annotation_file, filter = list("type"=c("CDS", "rRNA", "tRNA")))
annotation_GR <- readGFFAsGRanges(filepath = annotation_file)
#loading TCS table
TCS_df <- read.delim(file = "Results/Tables/TCS_detection_tables/LRTest_table.tsv", sep = "\t", stringsAsFactors = F)
#generating GRanges object from TCS table
TCS_df.GR <- with(TCS_df, GRanges(seqnames = SeqID, strand = Strand, ranges = IRanges(Pos, Pos)))
#finding overlaps between genomic features and TCS
overlaps <- findOverlaps(query = TCS_df.GR, subject = annotation_GR, type = "within")
overlaps_table <- data.table(SeqID = as.character(TCS_df.GR[overlaps@from]@seqnames),
Pos = as.integer(TCS_df.GR[overlaps@from]@ranges@start),
Strand = as.character(TCS_df.GR[overlaps@from]@strand),
MatchedFeatureType = annotation_GR[overlaps@to]$type,
MatchedFeatureID = annotation_GR[overlaps@to]$ID,
MatchedFeatureGene = annotation_GR[overlaps@to]$gene,
MatchedFeatureDescription = annotation_GR[overlaps@to]$product,
MatchedFeatureStart = annotation_GR[overlaps@to]@ranges@start,
MatchedFeatureEnd = annotation_GR[overlaps@to]@ranges@start + annotation_GR[overlaps@to]@ranges@width-1,
MatchedFeatureStrand = as.character(annotation_GR[overlaps@to]@strand)) %>%
filter(., !(MatchedFeatureType %in% c("gene", "exon")))
overlaps_table.merged <- inner_join(x = TCS_df, y = overlaps_table, by = c("SeqID", "Pos", "Strand"))
write.table(overlaps_table.merged, "Results/Tables/TCS_detection_tables/LRTest_table_and_genome_features.tsv", sep = "\t", row.names = F, quote = F)
